// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests_Home show signup 1`] = `
<ContextProvider
  value={
    Object {
      "locale": undefined,
      "setLocale": [Function],
    }
  }
>
  <ForwardRef(Box)
    sx={
      Object {
        "display": "flex",
      }
    }
  >
    <CssBaseline />
    <ForwardRef(AppBar)
      position="fixed"
      sx={
        Object {
          "zIndex": [Function],
        }
      }
    >
      <ForwardRef(Toolbar)>
        <ForwardRef(Typography)
          component="div"
          noWrap={true}
          sx={
            Object {
              "flexGrow": 1,
            }
          }
          variant="h6"
        >
          DermoApp
        </ForwardRef(Typography)>
        <div>
          <ForwardRef(IconButton)
            aria-controls="menu-appbar"
            aria-haspopup="true"
            aria-label="account of current user"
            color="inherit"
            id="languageMenu"
            onClick={[Function]}
            size="large"
          >
            <Memo(ForwardRef(PublicIcon)) />
          </ForwardRef(IconButton)>
          <ForwardRef(Menu)
            anchorEl={null}
            anchorOrigin={
              Object {
                "horizontal": "right",
                "vertical": "top",
              }
            }
            id="menu-appbar"
            keepMounted={true}
            onClose={[Function]}
            open={false}
            transformOrigin={
              Object {
                "horizontal": "right",
                "vertical": "top",
              }
            }
          >
            <ForwardRef(MenuItem)
              id="languageEs"
              onClick={[Function]}
            >
              es
            </ForwardRef(MenuItem)>
            <ForwardRef(MenuItem)
              id="languageEn"
              onClick={[Function]}
            >
              en
            </ForwardRef(MenuItem)>
          </ForwardRef(Menu)>
        </div>
        <div>
          <ForwardRef(IconButton)
            aria-controls="menu-appbar"
            aria-haspopup="true"
            aria-label="account of current user"
            color="inherit"
            id="optionsMenu"
            onClick={[Function]}
            size="large"
          >
            <Memo(ForwardRef(AccountCircleIcon)) />
          </ForwardRef(IconButton)>
          <ForwardRef(Menu)
            anchorEl={null}
            anchorOrigin={
              Object {
                "horizontal": "right",
                "vertical": "top",
              }
            }
            id="menu-appbar"
            keepMounted={true}
            onClose={[Function]}
            open={false}
            transformOrigin={
              Object {
                "horizontal": "right",
                "vertical": "top",
              }
            }
          >
            <ForwardRef(MenuItem)
              id="menuLogout"
              onClick={[Function]}
            >
              signOut
            </ForwardRef(MenuItem)>
          </ForwardRef(Menu)>
        </div>
      </ForwardRef(Toolbar)>
    </ForwardRef(AppBar)>
    <ForwardRef(Drawer)
      sx={
        Object {
          "& .MuiDrawer-paper": Object {
            "boxSizing": "border-box",
            "width": 240,
          },
          "flexShrink": 0,
          "width": 240,
        }
      }
      variant="permanent"
    >
      <ForwardRef(Toolbar) />
      <ForwardRef(Box)
        sx={
          Object {
            "overflow": "auto",
          }
        }
      >
        <ForwardRef(List)>
          <ForwardRef(ListItem)
            disablePadding={true}
            id="drawerOption-schedule"
            key="menuSchedule"
            onClick={[Function]}
          >
            <ForwardRef(ListItemButton)>
              <ForwardRef(ListItemIcon)>
                <Memo(ForwardRef(CalendarMonthIcon)) />
              </ForwardRef(ListItemIcon)>
              <ForwardRef(ListItemText)
                primary="menuSchedule"
              />
            </ForwardRef(ListItemButton)>
          </ForwardRef(ListItem)>
          <ForwardRef(ListItem)
            disablePadding={true}
            id="drawerOption-patients"
            key="menuPatients"
            onClick={[Function]}
          >
            <ForwardRef(ListItemButton)>
              <ForwardRef(ListItemIcon)>
                <Memo(ForwardRef(AccessibilityIcon)) />
              </ForwardRef(ListItemIcon)>
              <ForwardRef(ListItemText)
                primary="menuPatients"
              />
            </ForwardRef(ListItemButton)>
          </ForwardRef(ListItem)>
          <ForwardRef(ListItem)
            disablePadding={true}
            id="drawerOption-cases"
            key="menuCases"
            onClick={[Function]}
          >
            <ForwardRef(ListItemButton)>
              <ForwardRef(ListItemIcon)>
                <Memo(ForwardRef(LibraryBooksIcon)) />
              </ForwardRef(ListItemIcon)>
              <ForwardRef(ListItemText)
                primary="menuCases"
              />
            </ForwardRef(ListItemButton)>
          </ForwardRef(ListItem)>
          <ForwardRef(ListItem)
            disablePadding={true}
            id="drawerOption-reports"
            key="menuReports"
            onClick={[Function]}
          >
            <ForwardRef(ListItemButton)>
              <ForwardRef(ListItemIcon)>
                <Memo(ForwardRef(AssessmentIcon)) />
              </ForwardRef(ListItemIcon)>
              <ForwardRef(ListItemText)
                primary="menuReports"
              />
            </ForwardRef(ListItemButton)>
          </ForwardRef(ListItem)>
        </ForwardRef(List)>
      </ForwardRef(Box)>
    </ForwardRef(Drawer)>
    <ForwardRef(Box)
      component="main"
      sx={
        Object {
          "flexGrow": 1,
          "p": 3,
        }
      }
    >
      <Routes>
        <Route
          element={<Schedule />}
          exact={true}
          path="/"
        />
        <Route
          element={<PatientDetail />}
          exact={true}
          path="/patients/:id"
        />
        <Route
          element={<Patients />}
          exact={true}
          path="/patients"
        />
        <Route
          element={<Cases />}
          exact={true}
          path="/cases"
        />
        <Route
          element={<Reports />}
          exact={true}
          path="/reports"
        />
      </Routes>
    </ForwardRef(Box)>
  </ForwardRef(Box)>
</ContextProvider>
`;
